version: '3.7'

services:
  backend: &BACKEND
    container_name: backend
    image: $CI_REGISTRY/$CI_PROJECT_PATH/backend:${CI_COMMIT_SHA}
    env_file:
      - .env
    ports:
      - '8000:8000'
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: $CI_REGISTRY/$CI_PROJECT_PATH/db:${CI_COMMIT_SHA}
    container_name: db
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  frontend:
    image: $CI_REGISTRY/$CI_PROJECT_PATH/frontend:${CI_COMMIT_SHA}
    container_name: frontend
    ports:
      - '8080:8080'
    restart: unless-stopped
    depends_on:
      - backend

  redis:
    container_name: redis
    image: redis
    ports:
      - '6379:6379'
    restart: unless-stopped

  celery:
    <<: *BACKEND
    container_name: celery
    ports: []
    command: ["celery", "-A", "trading", "worker", "-l", "info"]
    restart: unless-stopped

  celery-beat:
    <<: *BACKEND
    container_name: celery-beat
    ports: []
    command: ["celery", "-A", "trading", "beat", "-l", "info"]
    restart: unless-stopped

  selenoid:
    image: aerokube/selenoid:latest-release
    container_name: selenoid
    ports:
      - '4444:4444'
    volumes:
      - './browsers.json:/etc/selenoid/browsers.json'
      - '/var/run/docker.sock:/var/run/docker.sock'
    command: ['-conf', '/etc/selenoid/browsers.json','-container-network', 'stock']
    restart: unless-stopped
    
  selenoid-ui:
    image: "aerokube/selenoid-ui"
    container_name: selenoid-ui
    links:
      - selenoid
    depends_on:
      - selenoid
    ports:
      - '8081:8080'
    command: ['--selenoid-uri', 'http://selenoid:4444']
    restart: unless-stopped


volumes:
  pgdata:

networks:
  default:
    name: stock
