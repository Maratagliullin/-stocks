version: '3.7'

services:
  backend: &BACKEND
    # container_name: backend
    image: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.local
    env_file:
      - .env
    volumes:
      - ./backend:/app
    ports:
      - '8000:8000'
    depends_on:
      - db
    restart: unless-stopped
    command: bash /local_run.sh

  celery:
    <<: *BACKEND
    ports: []
    command: ["celery", "-A", "trading", "worker", "-l", "info"]

  celery-beat:
    <<: *BACKEND
    ports: []
    command: ["celery", "-A", "trading", "beat", "-l", "info"]
 
  db:
    image: db
    container_name: db
    build:
      context: ./db
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  frontend:
    image: frontend
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.local
    volumes:
      - ./frontend/src:/app/src
    ports:
      - '8080:8080'
    restart: unless-stopped
    command: npm run serve
    depends_on:
      - backend
  
  # pgadmin:
  #   image: dpage/pgadmin4
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: marat.agl@gmail.com
  #     PGADMIN_DEFAULT_PASSWORD: Admin
  #   ports:
  #     - "8082:80"

  selenoid:
    image: aerokube/selenoid:latest-release
    container_name: selenoid
    ports:
      - '4444:4444'
    volumes:
      - './selenoid/browsers.json:/etc/selenoid/browsers.json'
      - '/var/run/docker.sock:/var/run/docker.sock'
    command: ['-conf', '/etc/selenoid/browsers.json','-container-network', 'stock']
    

  selenoid-ui:
    image: "aerokube/selenoid-ui"
    container_name: selenoid-ui
    links:
      - selenoid
    depends_on:
      - selenoid
    ports:
      - '8081:8080'
    command: ['--selenoid-uri', 'http://selenoid:4444']

  redis:
    image: redis
    ports:
      - '6379:6379'
   

volumes:
  pgdata:
  static:

networks:
  default:
    name: stock
